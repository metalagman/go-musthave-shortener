// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go

// Package storemock is a generated GoMock package.
package storemock

import (
	reflect "reflect"
	store "shortener/internal/app/service/store"

	gomock "github.com/golang/mock/gomock"
)

// MockHealthChecker is a mock of HealthChecker interface.
type MockHealthChecker struct {
	ctrl     *gomock.Controller
	recorder *MockHealthCheckerMockRecorder
}

// MockHealthCheckerMockRecorder is the mock recorder for MockHealthChecker.
type MockHealthCheckerMockRecorder struct {
	mock *MockHealthChecker
}

// NewMockHealthChecker creates a new mock instance.
func NewMockHealthChecker(ctrl *gomock.Controller) *MockHealthChecker {
	mock := &MockHealthChecker{ctrl: ctrl}
	mock.recorder = &MockHealthCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthChecker) EXPECT() *MockHealthCheckerMockRecorder {
	return m.recorder
}

// HealthCheck mocks base method.
func (m *MockHealthChecker) HealthCheck() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck")
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockHealthCheckerMockRecorder) HealthCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockHealthChecker)(nil).HealthCheck))
}

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// BatchRemove mocks base method.
func (m *MockStore) BatchRemove(uid string, ids ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{uid}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchRemove", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchRemove indicates an expected call of BatchRemove.
func (mr *MockStoreMockRecorder) BatchRemove(uid interface{}, ids ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{uid}, ids...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchRemove", reflect.TypeOf((*MockStore)(nil).BatchRemove), varargs...)
}

// BatchWrite mocks base method.
func (m *MockStore) BatchWrite(uid string, in []store.Record) ([]store.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchWrite", uid, in)
	ret0, _ := ret[0].([]store.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchWrite indicates an expected call of BatchWrite.
func (mr *MockStoreMockRecorder) BatchWrite(uid, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchWrite", reflect.TypeOf((*MockStore)(nil).BatchWrite), uid, in)
}

// ReadURL mocks base method.
func (m *MockStore) ReadURL(id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadURL", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadURL indicates an expected call of ReadURL.
func (mr *MockStoreMockRecorder) ReadURL(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadURL", reflect.TypeOf((*MockStore)(nil).ReadURL), id)
}

// ReadUserData mocks base method.
func (m *MockStore) ReadUserData(uid string) []store.Record {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserData", uid)
	ret0, _ := ret[0].([]store.Record)
	return ret0
}

// ReadUserData indicates an expected call of ReadUserData.
func (mr *MockStoreMockRecorder) ReadUserData(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserData", reflect.TypeOf((*MockStore)(nil).ReadUserData), uid)
}

// WriteURL mocks base method.
func (m *MockStore) WriteURL(url, uid string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteURL", url, uid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteURL indicates an expected call of WriteURL.
func (mr *MockStoreMockRecorder) WriteURL(url, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteURL", reflect.TypeOf((*MockStore)(nil).WriteURL), url, uid)
}

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// ReadURL mocks base method.
func (m *MockReader) ReadURL(id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadURL", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadURL indicates an expected call of ReadURL.
func (mr *MockReaderMockRecorder) ReadURL(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadURL", reflect.TypeOf((*MockReader)(nil).ReadURL), id)
}

// MockUserDataReader is a mock of UserDataReader interface.
type MockUserDataReader struct {
	ctrl     *gomock.Controller
	recorder *MockUserDataReaderMockRecorder
}

// MockUserDataReaderMockRecorder is the mock recorder for MockUserDataReader.
type MockUserDataReaderMockRecorder struct {
	mock *MockUserDataReader
}

// NewMockUserDataReader creates a new mock instance.
func NewMockUserDataReader(ctrl *gomock.Controller) *MockUserDataReader {
	mock := &MockUserDataReader{ctrl: ctrl}
	mock.recorder = &MockUserDataReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDataReader) EXPECT() *MockUserDataReaderMockRecorder {
	return m.recorder
}

// ReadUserData mocks base method.
func (m *MockUserDataReader) ReadUserData(uid string) []store.Record {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserData", uid)
	ret0, _ := ret[0].([]store.Record)
	return ret0
}

// ReadUserData indicates an expected call of ReadUserData.
func (mr *MockUserDataReaderMockRecorder) ReadUserData(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserData", reflect.TypeOf((*MockUserDataReader)(nil).ReadUserData), uid)
}

// MockWriter is a mock of Writer interface.
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
}

// MockWriterMockRecorder is the mock recorder for MockWriter.
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance.
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// WriteURL mocks base method.
func (m *MockWriter) WriteURL(url, uid string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteURL", url, uid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteURL indicates an expected call of WriteURL.
func (mr *MockWriterMockRecorder) WriteURL(url, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteURL", reflect.TypeOf((*MockWriter)(nil).WriteURL), url, uid)
}

// MockBatchWriter is a mock of BatchWriter interface.
type MockBatchWriter struct {
	ctrl     *gomock.Controller
	recorder *MockBatchWriterMockRecorder
}

// MockBatchWriterMockRecorder is the mock recorder for MockBatchWriter.
type MockBatchWriterMockRecorder struct {
	mock *MockBatchWriter
}

// NewMockBatchWriter creates a new mock instance.
func NewMockBatchWriter(ctrl *gomock.Controller) *MockBatchWriter {
	mock := &MockBatchWriter{ctrl: ctrl}
	mock.recorder = &MockBatchWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchWriter) EXPECT() *MockBatchWriterMockRecorder {
	return m.recorder
}

// BatchWrite mocks base method.
func (m *MockBatchWriter) BatchWrite(uid string, in []store.Record) ([]store.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchWrite", uid, in)
	ret0, _ := ret[0].([]store.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchWrite indicates an expected call of BatchWrite.
func (mr *MockBatchWriterMockRecorder) BatchWrite(uid, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchWrite", reflect.TypeOf((*MockBatchWriter)(nil).BatchWrite), uid, in)
}

// MockBatchRemover is a mock of BatchRemover interface.
type MockBatchRemover struct {
	ctrl     *gomock.Controller
	recorder *MockBatchRemoverMockRecorder
}

// MockBatchRemoverMockRecorder is the mock recorder for MockBatchRemover.
type MockBatchRemoverMockRecorder struct {
	mock *MockBatchRemover
}

// NewMockBatchRemover creates a new mock instance.
func NewMockBatchRemover(ctrl *gomock.Controller) *MockBatchRemover {
	mock := &MockBatchRemover{ctrl: ctrl}
	mock.recorder = &MockBatchRemoverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchRemover) EXPECT() *MockBatchRemoverMockRecorder {
	return m.recorder
}

// BatchRemove mocks base method.
func (m *MockBatchRemover) BatchRemove(uid string, ids ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{uid}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchRemove", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchRemove indicates an expected call of BatchRemove.
func (mr *MockBatchRemoverMockRecorder) BatchRemove(uid interface{}, ids ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{uid}, ids...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchRemove", reflect.TypeOf((*MockBatchRemover)(nil).BatchRemove), varargs...)
}

// MockStatProvider is a mock of StatProvider interface.
type MockStatProvider struct {
	ctrl     *gomock.Controller
	recorder *MockStatProviderMockRecorder
}

// MockStatProviderMockRecorder is the mock recorder for MockStatProvider.
type MockStatProviderMockRecorder struct {
	mock *MockStatProvider
}

// NewMockStatProvider creates a new mock instance.
func NewMockStatProvider(ctrl *gomock.Controller) *MockStatProvider {
	mock := &MockStatProvider{ctrl: ctrl}
	mock.recorder = &MockStatProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatProvider) EXPECT() *MockStatProviderMockRecorder {
	return m.recorder
}

// Stat mocks base method.
func (m *MockStatProvider) Stat() (*store.StatData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat")
	ret0, _ := ret[0].(*store.StatData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockStatProviderMockRecorder) Stat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockStatProvider)(nil).Stat))
}
